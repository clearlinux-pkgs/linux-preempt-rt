From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: jplozi <jplozi@unice.fr>
Date: Thu, 16 Apr 2020 14:23:27 -0500
Subject: [PATCH] overload on wakeup

As an experiment, apply the learnings from the wasted-cores paper
and see how the performance works out. With the data from this we should
be able to work with Peter and the rest of the scheduler folks on
a more permanent/elegant solution.

Source: https://github.com/jplozi/wastedcores
---
 kernel/sched/fair.c | 28 ++++++++++++++++++++++++++++
 1 file changed, 28 insertions(+)

diff --git a/kernel/sched/fair.c b/kernel/sched/fair.c
index e4516b05b..3cd2e2b4b 100644
--- a/kernel/sched/fair.c
+++ b/kernel/sched/fair.c
@@ -6713,6 +6713,8 @@ static int find_energy_efficient_cpu(struct task_struct *p, int prev_cpu)
 	return -1;
 }
 
+
+static unsigned int once_in_a_while;
 /*
  * select_task_rq_fair: Select target runqueue for the waking task in domains
  * that have the 'sd_flag' flag set. In practice, this is SD_BALANCE_WAKE,
@@ -6767,6 +6769,32 @@ select_task_rq_fair(struct task_struct *p, int prev_cpu, int sd_flag, int wake_f
 
 
 	rcu_read_lock();
+
+	once_in_a_while++;
+
+	if (cpu_rq(prev_cpu)->nr_running || (once_in_a_while & 15) == 0) {
+		int _cpu;
+		int bestprio = -5000;
+		int bestcpu = -1;
+
+		for_each_online_cpu(_cpu) {
+			if (!cpumask_test_cpu(_cpu, p->cpus_ptr)
+				|| cpu_rq(_cpu)->nr_running)
+				continue;
+			if (arch_asym_cpu_priority(_cpu) > bestprio
+				|| (prev_cpu == _cpu
+					&& bestprio == arch_asym_cpu_priority(_cpu))) {
+				bestcpu = _cpu;
+				bestprio = arch_asym_cpu_priority(_cpu);
+			}
+		}
+
+		if (bestcpu >= 0) {
+			rcu_read_unlock();
+			return bestcpu;
+		}
+	}
+
 	for_each_domain(cpu, tmp) {
 		/*
 		 * If both 'cpu' and 'prev_cpu' are part of this domain,
-- 
https://clearlinux.org

